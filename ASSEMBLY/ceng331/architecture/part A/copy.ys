#Emrah KOSEN
#1942317

	.pos 0
	irmovq stack, %rsp
	call main
	halt



	.align 8
	# Source block
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00
	# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333








main:
	irmovq src,%rdi     									#first element of src list
	irmovq dest,%rsi											 #first element of dest list
	irmovq $3,%rdx
	call copy_block															# copy_block((long *src,long *dest, long len)
	ret

																						# long copy_block((long *src,long *dest, long len)
																						# src in %rdi,dest in rsi, len in rdx
copy_block:
	xorq %rax,%rax        									# return value initially 0
	irmovq $8,%r8  													# r8 = 8
	irmovq $-1,%r9 													# r9 = -1
loop:
	andq %rdx, %rdx													#if len == 0
	je end
	mrmovq (%rdi), %r10	              			# Get r10 = *rdi
	rmmovq %r10, (%rsi)                     # *rsi = r10
	xorq %r10,%rax													# result Ë†= val;
	addq %r8, %rdi												 	# src++
	addq %r8, %rsi													# dest++
	addq %r9,%rdx  								        # count--
	jmp loop


end:
	ret                  										# Return

																					# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
